package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous
public class SankOjibwa extends LinearOpMode {
    static final double TICKS_PER_REVOLUTION = 537.6;
    static final double DRIVE_GEAR_REDUCTION = 1.0;
    static final double WHEEL_DIAMETER_INCHES = 3.5;
    static final double     COUNTS_PER_INCH         = (TICKS_PER_REVOLUTION * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double DRIVE_SPEED = 0.7;
    static final double TURN_SPEED = 0.6;
    static final double STRAFE_SPEED = 0.6;
    public DcMotor FL_Motor;
    public DcMotor BL_Motor;
    public DcMotor FR_Motor;
    public DcMotor BR_Motor;
    public ElapsedTime runtime = new ElapsedTime();


    public void encoderdrive(double speed, double leftInches, double rightInches, double timeoutS){
        int newFrontleft;
        int newBottomLeft;
        int newFrontright;
        int newBottomRight;

        if(opModeIsActive()){
            newFrontleft = FL_Motor.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newFrontright = FR_Motor.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            newBottomLeft = BL_Motor.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newBottomRight = BR_Motor.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            FL_Motor.setTargetPosition(newFrontleft);
            FR_Motor.setTargetPosition(newFrontright);
            BL_Motor.setTargetPosition(newBottomLeft);
            BR_Motor.setTargetPosition(newBottomRight);

            FL_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FR_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BL_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BR_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            runtime.reset();
        }

    }


    @Override
    public void runOpMode(){
        FL_Motor = hardwareMap.get(DcMotor.class,"FL_Motor");
        FR_Motor = hardwareMap.get(DcMotor.class,"FR_Motor");
        BL_Motor = hardwareMap.get(DcMotor.class,"BL_Motor");
        BR_Motor = hardwareMap.get(DcMotor.class,"BR_Motor");
    }
}
